generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(cuid())
  email             String             @unique
  name              String?
  image             String?
  emailVerified     DateTime?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  accounts          Account[]
  contentAnalytics  ContentAnalytics[]
  assignedFeedbacks Feedback[]         @relation("AssignedFeedbacks")
  feedbacks         Feedback[]
  assignedInquiries Inquiry[]          @relation("AssignedInquiries")
  inquiries         Inquiry[]          @relation("UserInquiries")
  assignedLeads     Lead[]             @relation("AssignedLeads")
  assignedRequests  Request[]          @relation("AssignedRequests")
  requests          Request[]
  sessions          Session[]
  profile           UserProfile?
  managedProjects   Project[]
  projectActivities ProjectActivity[]
  orders            Order[]
  auditLogs         AuditLog[]
  crossSiteActivities CrossSiteActivity[]

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model UserProfile {
  id                 String           @id @default(cuid())
  userId             String           @unique
  displayName        String?
  bio                String?
  websiteUrl         String?
  twitterHandle      String?
  discordId          String?
  preferredCharacter CharacterType    @default(BOTH)
  subscriptionTier   SubscriptionTier @default(FREE)
  totalSpent         Decimal          @default(0)
  lastActivity       DateTime?
  marketingConsent   Boolean          @default(false)
  isAdmin            Boolean          @default(false)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  user               User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model Lead {
  id                String     @id @default(cuid())
  email             String
  name              String?
  company           String?
  jobTitle          String?
  phone             String?
  source            LeadSource
  sourceDomain      String?
  sourcePage        String?
  leadType          LeadType
  status            LeadStatus @default(NEW)
  priority          Priority   @default(MEDIUM)
  estimatedValue    Decimal?
  expectedCloseDate DateTime?
  assignedToId      String?
  notes             String?
  gdprConsent       Boolean    @default(false)
  consentDate       DateTime?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  feedbacks         Feedback[]
  inquiries         Inquiry[]
  assignedTo        User?      @relation("AssignedLeads", fields: [assignedToId], references: [id])
  requests          Request[]
  companyContacts   CompanyContact[]
  projects          Project[]

  @@map("leads")
}

model Inquiry {
  id                 String        @id @default(cuid())
  leadId             String?
  userId             String?
  inquiryType        InquiryType
  subject            String
  message            String
  attachments        Json?
  status             InquiryStatus @default(OPEN)
  priority           Priority      @default(MEDIUM)
  assignedToId       String?
  responseTimeSla    Int?
  firstResponseAt    DateTime?
  resolvedAt         DateTime?
  satisfactionRating Int?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  assignedTo         User?         @relation("AssignedInquiries", fields: [assignedToId], references: [id])
  lead               Lead?         @relation(fields: [leadId], references: [id])
  user               User?         @relation("UserInquiries", fields: [userId], references: [id])

  @@map("inquiries")
}

model Feedback {
  id             String         @id @default(cuid())
  leadId         String?
  userId         String?
  characterOwner CharacterOwner
  feedbackType   FeedbackType
  subject        String
  message        String
  rating         Int?
  status         FeedbackStatus @default(NEW)
  assignedToId   String?
  response       String?
  respondedAt    DateTime?
  tags           Json?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  assignedTo     User?          @relation("AssignedFeedbacks", fields: [assignedToId], references: [id])
  lead           Lead?          @relation(fields: [leadId], references: [id])
  user           User?          @relation(fields: [userId], references: [id])

  @@map("feedbacks")
}

model Request {
  id             String         @id @default(cuid())
  leadId         String?
  userId         String?
  characterOwner CharacterOwner
  requestType    RequestType
  title          String
  description    String
  priority       Priority       @default(MEDIUM)
  status         RequestStatus  @default(PENDING)
  assignedToId   String?
  implementedAt  DateTime?
  metadata       Json?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  assignedTo     User?          @relation("AssignedRequests", fields: [assignedToId], references: [id])
  lead           Lead?          @relation(fields: [leadId], references: [id])
  user           User?          @relation(fields: [userId], references: [id])

  @@map("requests")
}

model KpiMetric {
  id             String         @id @default(cuid())
  metricName     String
  characterScope CharacterOwner
  metricValue    Decimal
  metricDate     DateTime
  periodType     PeriodType
  metadata       Json?
  createdAt      DateTime       @default(now())

  @@unique([metricName, characterScope, metricDate, periodType])
  @@map("kpi_metrics")
}

model RevenueAnalytics {
  id                   String         @id @default(cuid())
  date                 DateTime
  characterAttribution CharacterOwner
  revenueSource        RevenueSource
  amount               Decimal
  currency             String         @default("JPY")
  customerCount        Int?
  newCustomerCount     Int?
  createdAt            DateTime       @default(now())

  @@map("revenue_analytics")
}

model Content {
  id                       String                     @id @default(cuid())
  title                    String
  slug                     String                     @unique
  content                  String?
  excerpt                  String?
  characterOwner           CharacterOwner
  contentType              ContentType
  status                   ContentStatus              @default(DRAFT)
  featured                 Boolean                    @default(false)
  viewCount                Int                        @default(0)
  likeCount                Int                        @default(0)
  downloadCount            Int                        @default(0)
  seoTitle                 String?
  seoDescription           String?
  tags                     Json?
  metadata                 Json?
  publishedAt              DateTime?
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  ContentToContentCategory ContentToContentCategory[]
  analytics                ContentAnalytics[]

  @@map("contents")
}

model ContentCategory {
  id                       String                     @id @default(cuid())
  name                     String
  slug                     String                     @unique
  characterScope           CharacterOwner
  description              String?
  parentId                 String?
  sortOrder                Int                        @default(0)
  createdAt                DateTime                   @default(now())
  ContentToContentCategory ContentToContentCategory[]
  parent                   ContentCategory?           @relation("CategoryTree", fields: [parentId], references: [id])
  children                 ContentCategory[]          @relation("CategoryTree")

  @@map("content_categories")
}

model ContentAnalytics {
  id        String    @id @default(cuid())
  contentId String
  userId    String?
  eventType EventType
  referrer  String?
  userAgent String?
  ipAddress String?
  sessionId String?
  createdAt DateTime  @default(now())
  content   Content   @relation(fields: [contentId], references: [id], onDelete: Cascade)
  user      User?     @relation(fields: [userId], references: [id])

  @@map("content_analytics")
}

model StreamSchedule {
  id               String         @id @default(cuid())
  title            String
  description      String?
  characterOwner   CharacterOwner
  streamType       StreamType
  scheduledDate    DateTime
  duration         Int?
  platform         String
  streamUrl        String?
  thumbnailUrl     String?
  isRecurring      Boolean        @default(false)
  recurringPattern Json?
  status           StreamStatus   @default(SCHEDULED)
  notified         Boolean        @default(false)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@map("stream_schedules")
}

model ContentToContentCategory {
  A                  String
  B                  String
  contents           Content         @relation(fields: [A], references: [id], onDelete: Cascade)
  content_categories ContentCategory @relation(fields: [B], references: [id], onDelete: Cascade)

  @@unique([A, B], map: "_ContentToContentCategory_AB_unique")
  @@index([B], map: "_ContentToContentCategory_B_index")
  @@map("_ContentToContentCategory")
}

enum CharacterType {
  YUYA
  AOBA
  BOTH
}

enum SubscriptionTier {
  FREE
  SUPPORTER
  PREMIUM
}

enum LeadSource {
  YUYA_SITE
  AOBA_SITE
  REFERRAL
  SOCIAL
  DIRECT
}

enum LeadType {
  B2B_CONSULTATION
  TOOL_INTEREST
  COLLABORATION
  MUSIC_LICENSING
  OTHER
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  PROPOSAL
  NEGOTIATION
  WON
  LOST
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum InquiryType {
  GENERAL
  TECHNICAL_SUPPORT
  BUSINESS
  COLLABORATION
  LICENSING
  BUG_REPORT
}

enum InquiryStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum CharacterOwner {
  YUYA
  AOBA
  SHARED
}

enum ContentType {
  BLOG
  TOOL
  MUSIC
  VIDEO
  DOCUMENTATION
  CASE_STUDY
}

enum ContentStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum EventType {
  VIEW
  LIKE
  SHARE
  DOWNLOAD
  COMMENT
}

enum StreamType {
  GAMING
  ASMR
  MUSIC
  COLLAB
  SPECIAL
}

enum StreamStatus {
  SCHEDULED
  LIVE
  COMPLETED
  CANCELLED
}

enum FeedbackType {
  BUG_REPORT
  FEATURE_REQUEST
  IMPROVEMENT
  COMPLAINT
  PRAISE
  OTHER
}

enum FeedbackStatus {
  NEW
  REVIEWING
  RESPONDED
  CLOSED
}

enum RequestType {
  NEW_FEATURE
  CONTENT_REQUEST
  TOOL_REQUEST
  COLLABORATION
  OTHER
}

enum RequestStatus {
  PENDING
  REVIEWING
  APPROVED
  IN_PROGRESS
  COMPLETED
  REJECTED
}

enum PeriodType {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

enum RevenueSource {
  B2B_PROJECT
  DIGITAL_PRODUCTS
  SUBSCRIPTIONS
  LICENSING
  OTHER
}

// ========== 企業管理 ==========
model Company {
  id                 String           @id @default(cuid())
  name               String
  domain             String?
  industry           String?
  sizeCategory       CompanySize?
  annualRevenueRange String?
  country            String?
  websiteUrl         String?
  description        String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  contacts CompanyContact[]
  projects Project[]
  
  @@map("companies")
}

model CompanyContact {
  id         String       @id @default(cuid())
  companyId  String
  leadId     String
  role       ContactRole
  createdAt  DateTime     @default(now())

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  lead    Lead    @relation(fields: [leadId], references: [id], onDelete: Cascade)
  
  @@unique([companyId, leadId])
  @@map("company_contacts")
}

// ========== プロジェクト管理 ==========
model Project {
  id                 String         @id @default(cuid())
  name               String
  description        String?
  companyId          String?
  leadId             String?
  projectType        ProjectType
  status             ProjectStatus  @default(PLANNING)
  startDate          DateTime?
  endDate            DateTime?
  budget             Decimal?
  actualCost         Decimal?
  profitMargin       Decimal?
  assignedCharacter  CharacterOwner
  projectManagerId   String?
  clientSatisfaction Int?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt

  company        Company?             @relation(fields: [companyId], references: [id])
  lead           Lead?                @relation(fields: [leadId], references: [id])
  projectManager User?                @relation(fields: [projectManagerId], references: [id])
  deliverables   ProjectDeliverable[]
  activities     ProjectActivity[]
  
  @@map("projects")
}

model ProjectDeliverable {
  id           String             @id @default(cuid())
  projectId    String
  name         String
  description  String?
  fileUrl      String?
  deliveryDate DateTime?
  status       DeliverableStatus  @default(PLANNED)
  createdAt    DateTime           @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@map("project_deliverables")
}

model ProjectActivity {
  id           String       @id @default(cuid())
  projectId    String
  userId       String?
  activityType ActivityType
  description  String
  metadata     Json?
  createdAt    DateTime     @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User?   @relation(fields: [userId], references: [id])
  
  @@map("project_activities")
}

// ========== EC・販売管理 ==========
model Product {
  id                String         @id @default(cuid())
  name              String
  description       String?
  characterOwner    CharacterOwner
  productType       ProductType
  price             Decimal
  currency          String         @default("JPY")
  isRecurring       Boolean        @default(false)
  recurringInterval RecurringInterval?
  fileUrl           String?
  licenseType       LicenseType?
  status            ProductStatus  @default(ACTIVE)
  inventoryCount    Int?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  orderItems OrderItem[]
  
  @@map("products")
}

model Order {
  id              String      @id @default(cuid())
  userId          String?
  orderNumber     String      @unique
  totalAmount     Decimal
  currency        String      @default("JPY")
  status          OrderStatus @default(PENDING)
  paymentMethod   String?
  paymentIntentId String?
  billingAddress  Json?
  shippingAddress Json?
  notes           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  user       User?       @relation(fields: [userId], references: [id])
  orderItems OrderItem[]
  
  @@map("orders")
}

model OrderItem {
  id            String   @id @default(cuid())
  orderId       String
  productId     String?
  quantity      Int      @default(1)
  unitPrice     Decimal
  totalPrice    Decimal
  licenseKey    String?
  downloadCount Int      @default(0)
  downloadLimit Int?
  createdAt     DateTime @default(now())

  order   Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product? @relation(fields: [productId], references: [id])
  
  @@map("order_items")
}

// ========== 監査ログ ==========
model AuditLog {
  id         String      @id @default(cuid())
  userId     String?
  action     String
  resource   String
  resourceId String?
  changes    Json?
  ipAddress  String?
  userAgent  String?
  status     LogStatus
  createdAt  DateTime    @default(now())

  user User? @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@index([resource])
  @@index([createdAt])
  @@map("audit_logs")
}

// ========== クロスドメイン連携 ==========
model CrossSiteActivity {
  id         String   @id @default(cuid())
  userId     String?
  fromDomain String
  toDomain   String
  sessionId  String
  createdAt  DateTime @default(now())

  user User? @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@index([sessionId])
  @@map("cross_site_activities")
}

// ========== 新しいEnums ==========
enum CompanySize {
  STARTUP
  SMALL
  MEDIUM
  LARGE
  ENTERPRISE
}

enum ContactRole {
  PRIMARY
  SECONDARY
  DECISION_MAKER
  TECHNICAL
  FINANCIAL
}

enum ProjectType {
  AI_DEVELOPMENT
  TOOL_CREATION
  CONSULTATION
  MUSIC_PRODUCTION
  COLLABORATION
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum DeliverableStatus {
  PLANNED
  IN_PROGRESS
  DELIVERED
  APPROVED
}

enum ActivityType {
  CREATED
  UPDATED
  COMMENT
  FILE_UPLOAD
  MILESTONE
  MEETING
}

enum ProductType {
  DIGITAL_TOOL
  MUSIC_STEM
  CONSULTATION
  SUBSCRIPTION
  MERCHANDISE
}

enum RecurringInterval {
  MONTHLY
  YEARLY
}

enum LicenseType {
  PERSONAL
  COMMERCIAL
  EXTENDED
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  DISCONTINUED
}

enum OrderStatus {
  PENDING
  PAID
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum LogStatus {
  SUCCESS
  FAILURE
}
